/**
 * SCRIPT HO√ÄN TH√ÄNH VIDEO COURSERA v5.3 (Enhanced Logic & Delay)
 * T√°c gi·∫£: D·ª±a tr√™n nghi√™n c·ª©u c·ªßa c·ªông ƒë·ªìng.
 * Ng√†y c·∫≠p nh·∫≠t: 21/10/2025
 *
 * T√çNH NƒÇNG:
 * - S·ª≠ d·ª•ng API onDemandVideoProgresses.v1 ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô video (ch√≠nh).
 * - G·ª≠i th√™m y√™u c·∫ßu 'ended' qua API opencourse.v1 ƒë·ªÉ tƒÉng t√≠nh t∆∞∆°ng th√≠ch (ph·ª•).
 * - TƒÉng ƒë·ªô tr·ªÖ gi·ªØa c√°c l·ªánh g·ªçi API l√™n 2 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o server ƒë·ªìng b·ªô.
 * - Logic t√¨m ki·∫øm th√¥ng minh h∆°n: lu√¥n ∆∞u ti√™n l·∫•y th·ªùi l∆∞·ª£ng video ch√≠nh x√°c nh·∫•t.
 * - T·ª± ƒë·ªông t√¨m videoId b·∫±ng 2 ph∆∞∆°ng ph√°p (ch√≠nh v√† d·ª± ph√≤ng).
 * - T·ª± ƒë·ªông l·∫•y t·∫•t c·∫£ th√¥ng tin c·∫ßn thi·∫øt (userId, courseId, lectureId).
 * - Cung c·∫•p log chi ti·∫øt tr√™n Console ƒë·ªÉ d·ªÖ d√†ng theo d√µi.
 *
 * C√ÅCH CH·∫†Y:
 * 1. M·ªü trang b√†i gi·∫£ng video tr√™n Coursera.
 * 2. M·ªü Developer Tools (F12 ho·∫∑c Ctrl+Shift+I).
 * 3. Chuy·ªÉn sang tab "Console".
 * 4. D√°n to√†n b·ªô script n√†y v√†o v√† nh·∫•n Enter.
 * 5. G√µ l·ªánh sau v√† nh·∫•n Enter:
 * await markCurrentVideoAsComplete()
 */

// ===================== HELPER FUNCTIONS =====================

function getUserId() {
    // 1. ∆Øu ti√™n t·ª´ script tag
    const scriptTag = document.querySelector('body > script:nth-child(3)');
    if (scriptTag && scriptTag.textContent) {
        const match = scriptTag.textContent.match(/(\d+~[A-Za-z0-9-_]+)/);
        if (match && match[1]) return match[1].split('~')[0];
    }

    // 2. T·ª´ header link
    const headerLink = document.querySelector('[data-testid="page-header-wrapper"] a[data-track-app="open_course_home"]');
    if (headerLink) {
        const clickValue = headerLink.getAttribute('data-click-value');
        if (clickValue) {
            try {
                const parsed = JSON.parse(clickValue);
                if (parsed.userId) return parsed.userId.toString();
            } catch (e) { /* B·ªè qua l·ªói parsing */ }
        }
    }

    // 3. Fallback: nh·∫≠p tay
    const manual = prompt("Kh√¥ng t·ª± ƒë·ªông l·∫•y ƒë∆∞·ª£c User ID.\n\nNh·∫≠p th·ªß c√¥ng (ch·ªâ s·ªë, v√≠ d·ª•: 182559818):");
    if (manual && /^\d+$/.test(manual.trim())) {
        return manual.trim();
    }

    throw new Error("Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c User ID. Script d·ª´ng l·∫°i.");
}

function getCourseContextFromUrl() {
    const match = window.location.pathname.match(/\/learn\/([^/]+)\/lecture\/([^/]+)/);
    if (!match) throw new Error("URL kh√¥ng h·ª£p l·ªá. H√£y ch·∫Øc ch·∫Øn b·∫°n ƒëang ·ªü tr√™n m·ªôt trang b√†i gi·∫£ng (lecture).");
    return { courseSlug: match[1], lectureId: match[2] };
}

async function getCourseId(slug) {
    const url = `https://www.coursera.org/api/onDemandCourses.v1?q=slug&slug=${slug}&fields=id`;
    const res = await fetch(url, { credentials: 'include' });
    if (!res.ok) throw new Error(`L·ªói khi l·∫•y courseId: ${res.status}`);
    const data = await res.json();
    const course = data.elements?.[0];
    if (!course?.id) throw new Error("Kh√¥ng t√¨m th·∫•y ID kh√≥a h·ªçc t·ª´ API.");
    return course.id;
}

// ===================== VIDEO INFO FINDER (ENHANCED) =====================

async function getVideoInfo(courseSlug, lectureId, courseId) {
    // B∆∞·ªõc 1: Lu√¥n truy v·∫•n API Course Materials v√¨ n√≥ ch·ª©a nhi·ªÅu metadata nh·∫•t (nh∆∞ duration).
    console.log("-> L·∫•y th√¥ng tin chi ti·∫øt b√†i gi·∫£ng t·ª´ Course Materials API...");
    const materialsUrl = `https://www.coursera.org/api/onDemandCourseMaterials.v2/?q=slug&slug=${courseSlug}&includes=items&fields=onDemandCourseMaterialItems.v2(name,slug,contentSummary,assetSummary)`;
    const materialsRes = await fetch(materialsUrl, { credentials: 'include' });
    if (!materialsRes.ok) throw new Error(`L·ªói API Materials: ${materialsRes.status}`);
    
    const materialsData = await materialsRes.json();
    const items = materialsData?.linked?.['onDemandCourseMaterialItems.v2'];
    if (!items) throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu b√†i h·ªçc trong API Materials.");
    
    const item = items.find(i => i.id === lectureId);
    if (!item) throw new Error(`Kh√¥ng t√¨m th·∫•y item '${lectureId}' trong API Materials.`);

    // B∆∞·ªõc 2: L·∫•y ra th·ªùi l∆∞·ª£ng ch√≠nh x√°c nh·∫•t c√≥ th·ªÉ. N·∫øu kh√¥ng c√≥, d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh.
    const duration = item?.assetSummary?.definition?.duration || 300000;
    console.log(`   T√¨m th·∫•y th·ªùi l∆∞·ª£ng: ${duration}ms`);

    // B∆∞·ªõc 3: Th·ª≠ l·∫•y videoId t·ª´ ngu·ªìn ch√≠nh (c√°ch 1).
    let videoId = item?.assetSummary?.definition?.videoId;
    if (videoId) {
        console.log("   Th√†nh c√¥ng l·∫•y videoId b·∫±ng c√°ch 1!");
        return { videoId, duration };
    }

    // B∆∞·ªõc 4: N·∫øu c√°ch 1 th·∫•t b·∫°i, d√πng c√°ch 2 (d·ª± ph√≤ng) ƒë·ªÉ l·∫•y videoId, nh∆∞ng v·∫´n gi·ªØ l·∫°i duration ƒë√£ t√¨m ƒë∆∞·ª£c.
    console.warn("   Kh√¥ng t√¨m th·∫•y videoId trong Course Materials. Th·ª≠ c√°ch 2 (Fallback)...");
    try {
        const lectureUrl = `https://www.coursera.org/api/onDemandLectureVideos.v1/${courseId}~${lectureId}?includes=video&fields=onDemandVideos.v1(id)`;
        const lectureRes = await fetch(lectureUrl, { credentials: 'include' });
        if (!lectureRes.ok) throw new Error(`L·ªói API Lecture: ${lectureRes.status}`);
        
        const lectureData = await lectureRes.json();
        videoId = lectureData?.linked?.['onDemandVideos.v1']?.[0]?.id;

        if (!videoId) {
            throw new Error("Kh√¥ng t√¨m th·∫•y videoId trong API Lecture.");
        }
        
        console.log("   Th√†nh c√¥ng l·∫•y videoId b·∫±ng c√°ch 2!");
        return { videoId, duration }; // Tr·∫£ v·ªÅ videoId t·ª´ c√°ch 2 v√† duration t·ª´ c√°ch 1.
    } catch (fallbackError) {
         console.error(`   C√°ch 2 c≈©ng th·∫•t b·∫°i: ${fallbackError.message}`);
         throw new Error("Kh√¥ng th·ªÉ t√¨m th·∫•y videoId b·∫±ng c·∫£ hai c√°ch. ƒê√¢y c√≥ th·ªÉ l√† b√†i ƒë·ªçc thu·∫ßn t√∫y ho·∫∑c quiz.");
    }
}


// ===================== CORE ACTIONS =====================

/**
 * [H√†nh ƒë·ªông ch√≠nh] G·ª≠i y√™u c·∫ßu PUT ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô video.
 */
async function completeVideo(userId, courseId, videoId, duration) {
    const videoProgressId = `${userId}~${courseId}~${videoId}`;
    const url = `https://www.coursera.org/api/onDemandVideoProgresses.v1/${videoProgressId}`;

    const csrfCookie = document.cookie.match(/CSRF3-Token=([^;]+)/) || document.cookie.match(/csrftoken=([^;]+)/);
    const csrfToken = csrfCookie ? csrfCookie[1] : '';
    if (!csrfToken) throw new Error("Kh√¥ng t√¨m th·∫•y CSRF token. B·∫°n ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a?");

    const headers = {
        'Content-Type': 'application/json',
        'x-requested-with': 'XMLHttpRequest',
        'x-coursera-application': 'ondemand'
    };
    if (document.cookie.includes('CSRF3-Token=')) {
        headers['x-csrf3-token'] = csrfToken;
    } else {
        headers['x-csrftoken'] = csrfToken;
    }

    const res = await fetch(url, {
        method: 'PUT',
        headers: headers,
        body: JSON.stringify({
            viewedUpTo: duration,
            videoProgressId: videoProgressId
        }),
        credentials: 'include'
    });
    
    if (res.status === 204 || res.ok) {
        return true;
    } else {
        console.error("Ph·∫£n h·ªìi l·ªói t·ª´ server (PUT request):", res);
        const errorBody = await res.text();
        console.error("N·ªôi dung l·ªói:", errorBody);
        return false;
    }
}

/**
 * [H√†nh ƒë·ªông ph·ª•] G·ª≠i y√™u c·∫ßu POST ƒë·ªÉ ƒë√°nh d·∫•u s·ª± ki·ªán 'ended'.
 */
async function markLectureAsEnded(userId, courseSlug, lectureId) {
    const apiUrl = `https://www.coursera.org/api/opencourse.v1/user/${userId}/course/${courseSlug}/item/${lectureId}/lecture/videoEvents/ended?autoEnroll=false`;
    
    try {
        const response = await fetch(apiUrl, {
            method: "POST",
            headers: {
                'Content-Type': 'application/json; charset=UTF-8',
                'x-coursera-application': 'ondemand',
                'x-requested-with': 'XMLHttpRequest'
            },
            body: JSON.stringify({ contentRequestBody: {} }),
            credentials: "include"
        });

        if (response.ok) {
            console.log("   -> Y√™u c·∫ßu b·ªï sung 'ended' th√†nh c√¥ng.");
        } else {
            const errorData = await response.json();
            console.warn(`   -> Y√™u c·∫ßu b·ªï sung 'ended' kh√¥ng th√†nh c√¥ng (Status: ${response.status}).`);
            console.warn(`      L√Ω do: ${errorData.message}`);
        }
    } catch (error) {
        console.warn(`   -> L·ªói khi g·ª≠i y√™u c·∫ßu 'ended': ${error.message}`);
    }
}


// ===================== MAIN FUNCTION =====================
async function markCurrentVideoAsComplete() {
    try {
        console.clear();
        console.log("%cüöÄ B·∫ÆT ƒê·∫¶U SCRIPT HO√ÄN TH√ÄNH VIDEO v5.3 üöÄ", "color: #8A2BE2; font-weight: bold; font-size: 16px");

        // 1. L·∫•y th√¥ng tin c∆° b·∫£n
        const userId = getUserId();
        const { courseSlug, lectureId } = getCourseContextFromUrl();
        console.log(`- User ID: ${userId}`);
        console.log(`- Kh√≥a h·ªçc Slug: ${courseSlug}`);
        console.log(`- B√†i gi·∫£ng ID: ${lectureId}`);

        // 2. L·∫•y Course ID n·ªôi b·ªô
        console.log("ƒêang l·∫•y Course ID...");
        const courseId = await getCourseId(courseSlug);
        console.log(`- Course ID: ${courseId}`);

        // 3. L·∫•y Video ID v√† Duration b·∫±ng ph∆∞∆°ng ph√°p t·ªïng h·ª£p
        console.log("ƒêang l·∫•y th√¥ng tin video...");
        const { videoId, duration } = await getVideoInfo(courseSlug, lectureId, courseId);
        console.log(`- Video ID: ${videoId}`);
        console.log(`- Th·ªùi l∆∞·ª£ng (ms): ${duration}`);

        // 4. G·ª≠i y√™u c·∫ßu ho√†n th√†nh ch√≠nh (PUT)
        console.log("ƒêang g·ª≠i y√™u c·∫ßu ho√†n th√†nh ch√≠nh (PUT)...");
        const success = await completeVideo(userId, courseId, videoId, duration);

        if (success) {
            // 5. ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ server ƒë·ªìng b·ªô
            console.log("ƒê·ª£i 2 gi√¢y ƒë·ªÉ server ƒë·ªìng b·ªô ti·∫øn ƒë·ªô...");
            await new Promise(resolve => setTimeout(resolve, 2000));

            // 6. G·ª≠i y√™u c·∫ßu ho√†n th√†nh ph·ª• (POST)
            console.log("ƒêang g·ª≠i y√™u c·∫ßu ho√†n th√†nh b·ªï sung (POST)...");
            await markLectureAsEnded(userId, courseSlug, lectureId);

            console.log("%c‚úÖ TH√ÄNH C√îNG! Video ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ho√†n th√†nh.", "color: #00d26a; font-weight: bold; font-size: 18px");
            console.log("   -> Vui l√≤ng T·∫¢I L·∫†I TRANG (F5) ƒë·ªÉ th·∫•y d·∫•u t√≠ch xanh.");
        } else {
            throw new Error("G·ª≠i y√™u c·∫ßu ho√†n th√†nh ch√≠nh (PUT) th·∫•t b·∫°i. Ki·ªÉm tra log l·ªói ·ªü tr√™n.");
        }

    } catch (error) {
        console.error("%c‚ùå ƒê√É X·∫¢Y RA L·ªñI:", "color: red; font-weight: bold; font-size: 16px", error.message);
        console.log("   -> G·ª£i √Ω: Ki·ªÉm tra l·∫°i b·∫°n ƒë√£ ƒëƒÉng nh·∫≠p, ƒëang ·ªü ƒë√∫ng trang video, v√† kh√¥ng c√≥ ti·ªán √≠ch n√†o ch·∫∑n cookie/request.");
    }
}

// H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
console.log(`
SCRIPT ƒê√É S·∫¥N S√ÄNG! (v5.3 - Enhanced Logic & Delay)
1. ƒê·∫£m b·∫£o b·∫°n ƒëang ·ªü ƒë√∫ng trang b√†i gi·∫£ng c√≥ video.
2. G√µ l·ªánh sau v√†o console v√† nh·∫•n Enter:
`);
console.log("%c   await markCurrentVideoAsComplete()", "background: #e3f2fd; color: #1976d2; padding: 4px 8px; border-radius: 4px; font-family: monospace;");

